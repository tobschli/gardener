// SPDX-FileCopyrightText: SAP SE or an SAP affiliate company and Gardener contributors
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta1 "github.com/gardener/gardener/pkg/apis/core/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSeedBindings implements SeedBindingInterface
type FakeSeedBindings struct {
	Fake *FakeCoreV1beta1
	ns   string
}

var seedbindingsResource = v1beta1.SchemeGroupVersion.WithResource("seedbindings")

var seedbindingsKind = v1beta1.SchemeGroupVersion.WithKind("SeedBinding")

// Get takes name of the seedBinding, and returns the corresponding seedBinding object, and an error if there is any.
func (c *FakeSeedBindings) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.SeedBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(seedbindingsResource, c.ns, name), &v1beta1.SeedBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SeedBinding), err
}

// List takes label and field selectors, and returns the list of SeedBindings that match those selectors.
func (c *FakeSeedBindings) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.SeedBindingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(seedbindingsResource, seedbindingsKind, c.ns, opts), &v1beta1.SeedBindingList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.SeedBindingList{ListMeta: obj.(*v1beta1.SeedBindingList).ListMeta}
	for _, item := range obj.(*v1beta1.SeedBindingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested seedBindings.
func (c *FakeSeedBindings) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(seedbindingsResource, c.ns, opts))

}

// Create takes the representation of a seedBinding and creates it.  Returns the server's representation of the seedBinding, and an error, if there is any.
func (c *FakeSeedBindings) Create(ctx context.Context, seedBinding *v1beta1.SeedBinding, opts v1.CreateOptions) (result *v1beta1.SeedBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(seedbindingsResource, c.ns, seedBinding), &v1beta1.SeedBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SeedBinding), err
}

// Update takes the representation of a seedBinding and updates it. Returns the server's representation of the seedBinding, and an error, if there is any.
func (c *FakeSeedBindings) Update(ctx context.Context, seedBinding *v1beta1.SeedBinding, opts v1.UpdateOptions) (result *v1beta1.SeedBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(seedbindingsResource, c.ns, seedBinding), &v1beta1.SeedBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SeedBinding), err
}

// Delete takes name of the seedBinding and deletes it. Returns an error if one occurs.
func (c *FakeSeedBindings) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(seedbindingsResource, c.ns, name, opts), &v1beta1.SeedBinding{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSeedBindings) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(seedbindingsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1beta1.SeedBindingList{})
	return err
}

// Patch applies the patch and returns the patched seedBinding.
func (c *FakeSeedBindings) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.SeedBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(seedbindingsResource, c.ns, name, pt, data, subresources...), &v1beta1.SeedBinding{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.SeedBinding), err
}
